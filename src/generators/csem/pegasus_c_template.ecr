
/* == User Code == */
<%= @semantics.init %>

/* == Nonterminals to String == */
const char* pgs_nonterminal_name(long int nt) {
    switch(nt) {
        <%- @language.nonterminals.each do |name, value| -%>
        case PGS_NONTERMINAL_<%= name.underscore.upcase %>: return <%= name.dump %>;
        <%- end -%>
        default: return "";
    }
}

/* == Generated Tables and Variables== */

#define PGS_MAX_TERMINAL <%= @language.max_terminal %>
int lexer_skip_table[<%= @language.lex_skip_table.size %>] = {
    <% @language.lex_skip_table.each do |skip| %><%= skip ? 1 : 0 %>, <% end %>
};
long int lexer_state_table[<%= @language.lex_state_table.size %>][<%= @language.lex_state_table[0].size %>] = {
<% @language.lex_state_table.each do |state| -%>
    { <% state.each do |transition| %><%= transition %>, <% end %> },
<% end -%>
};
long int lexer_final_table[<%= @language.lex_final_table.size %>] = {
    <% @language.lex_final_table.each do |final| %><%= final %>,<% end %>
};
long int parse_state_table[<%= @language.parse_state_table.size %>][<%= @language.parse_state_table[0].size %>]= {
<% @language.parse_state_table.each do |state| -%>
    { <% state.each do |transition| %><%= transition %>, <% end %> },
<% end -%>
};
long int parse_action_table[<%= @language.parse_action_table.size %>][<%= @language.parse_action_table[0].size %>] = {
<% @language.parse_action_table.each do |state| -%>
    { <% state.each do |action| %><%= action %>, <% end %> },
<% end -%>
};
pgs_item items[<%= @language.items.size %>] = {
<% @language.items.each do |item| -%>
    { <%= item.head.raw_id %>, <%= item.body.size %> },
<% end -%>
};

<%= {{ read_file "src/generators/c-common/standard_source.c" }} %>

<%= {{ read_file "src/generators/csem/sem_source.c" }} %>

pgs_error pgs_do_parse(pgs_state* s, pgs_token_list* list, pgs_stack_value* into, const char* src) {
    pgs_error error;
    pgs_parse_stack stack;
    long int top_state;
    long int current_token_id;
    long int action;
    long int nonterminal;
    size_t index = 0;
    pgs_stack_value temp;
    
    if((error = pgs_parse_stack_init(&stack))) return error;
    while(1) {
        current_token_id = pgs_token_list_at_id(list, index);
        top_state = pgs_parse_stack_top_state(&stack);
        action = parse_action_table[top_state][current_token_id];

        if(action == -1) {
            PGS_PARSE_ERROR(error_label, error, PGS_BAD_TOKEN, "Unexpected token at position");
        } else if(action == 0) {
            temp.token = pgs_token_list_at(list, index);
            if(index >= (list->token_count)) {
                PGS_PARSE_ERROR(error_label, error, PGS_EOF_SHIFT, "Unexpected end of file");
            }

            error = pgs_parse_stack_append(&stack, &temp, parse_state_table[top_state][temp.token->terminal]);
            if(error) goto error_label;
            index++;
        } else {
            switch(action - 1) {
                <%- @semantics.actions.each do |k, v| -%>
                case <%= k %>: <%= format_item(k, v) %>
                <%- end -%>
                default: break;
            }
            nonterminal = items[action - 1].left_id;
            stack.size -= items[action - 1].right_count;
            top_state = pgs_parse_stack_top_state(&stack);
            error = pgs_parse_stack_append(&stack, &temp, parse_state_table[top_state][nonterminal + 2 + PGS_MAX_TERMINAL]);
            switch(action - 1) {
                <%- @language.items.each_with_index do |item, i| -%><%- next unless item.head.start? -%>
                case <%= i %>: goto after_loop;
                <%- end -%>
                default: break;
            }
        }
    }
    after_loop:

    if(index != list->token_count) {
        PGS_PARSE_ERROR(error_label, error, PGS_BAD_TOKEN, "Unexpected token at position");
    }

    *into = stack.data[stack.size - 1].value;
    stack.size -= 1;

    error_label:
    pgs_parse_stack_free(&stack);
    return error;
}
